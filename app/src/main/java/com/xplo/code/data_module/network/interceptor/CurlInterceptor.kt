package com.xplo.code.data_module.network.interceptor

import okhttp3.Interceptor
import okhttp3.Request
import okhttp3.Response
import okhttp3.logging.HttpLoggingInterceptor.Logger
import okio.Buffer
import java.io.IOException
import java.nio.charset.StandardCharsets

/**
 * An OkHttp interceptor that logs requests as curl shell commands. They can then
 * be copied, pasted and executed inside a terminal environment. This might be
 * useful for troubleshooting client/server API interaction during development,
 * making it easy to isolate and share requests made by the app.
 *
 * Warning: The logs generated by this interceptor have the potential to leak sensitive
 * information. It should only be used in a controlled manner or in a non-production environment.
 */
class CurlInterceptor constructor(logger: Logger = Logger.DEFAULT) : Interceptor {
    companion object {
        private val UTF8 = StandardCharsets.UTF_8
    }

    private val logger: Logger
    private var curlOptions: String? = null

    init {
        this.logger = logger
    }

    /**
     * Set any additional curl command options (see 'curl --help').
     */
    fun setCurlOptions(curlOptions: String?) {
        this.curlOptions = curlOptions
    }

    @Throws(IOException::class)
    override fun intercept(chain: Interceptor.Chain): Response {
        val request: Request = chain.request()
        var compressed = false
        val curlBuilder = StringBuilder()
        curlBuilder.append("curl ")
        if (curlOptions != null) {
            curlBuilder.append(curlOptions)
        }
        curlBuilder.append("-X ")
        curlBuilder.append(request.method)
        val headers = request.headers
        var i = 0
        val count = headers.size
        while (i < count) {
            val name = headers.name(i)
            val value = headers.value(i)
            if ("Accept-Encoding".equals(name, ignoreCase = true)
                && "gzip".equals(value, ignoreCase = true)
            ) {
                compressed = true
            }
            curlBuilder.append(" -H ")
            curlBuilder.append("\"")
            curlBuilder.append(name)
            curlBuilder.append(": ")
            curlBuilder.append(value)
            curlBuilder.append("\"")
            i++
        }
        val requestBody = request.body
        if (requestBody != null) {
            val buffer = Buffer()
            requestBody.writeTo(buffer)
            var charset = UTF8
            val contentType = requestBody.contentType()
            if (contentType != null) {
                charset = contentType.charset(UTF8)
            }
            // try to keep to a single line and use a subshell to preserve any line breaks
            curlBuilder.append(" --data $'")
            curlBuilder.append(buffer.readString(charset).replace("\n", "\\n"))
            curlBuilder.append("'")
        }
        curlBuilder.append(if (compressed) " --compressed " else " ")
        curlBuilder.append("\"")
        curlBuilder.append(request.url)
        curlBuilder.append("\"")
        logger.log("╭--- cURL (" + request.url + ")")
        logger.log(curlBuilder.toString())
        logger.log("╰--- (copy and paste the above line to a terminal)")
        return chain.proceed(request)
    }


}